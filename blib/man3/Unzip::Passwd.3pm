.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Unzip::Passwd 3pm"
.TH Unzip::Passwd 3pm "2011-06-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& Unzip::Passwd \- Unzip files with password.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Extreamly simple Unzip abstraction using the unzip program( \s-1MUST\s0 \s-1BE\s0 \s-1INSTALLED\s0 )
.PP
\&\s-1WARNING:\s0 This is Alpha version.
.SH "VERSION"
.IX Header "VERSION"
Version 0.0.14
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& #Instance
\& my $obj = Unzip::Passwd\->new( filename => \*(Aqmyfile.zip\*(Aq,
\&                                        destiny => \*(Aqsome/path/to/file/unziped\*(Aq,
\&                                        passwd => \*(Aqsomebetterpassword\*(Aq,
\&                                                        );
\& #unzip ...
\& $obj\->unzip;
\&
\& #done!
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This is the constructor
.SS "unzip"
.IX Subsection "unzip"
Do the job, basicly. But first invokes the analyze method, to have certain the zip file is fine.
If analyze returns 1, then unzip will try to open the zip file.
No parameters, will return 1 if it's all ok. Otherwise, will return 0 and throw an exception.
.SS "list_files"
.IX Subsection "list_files"
This try to obtain a list of files from zipfile in \f(CW$self\fR\->filename. If succeded, returns an arrayref with the filelist. Otherwise returns 
an arrayref empty.
.SS "analyze"
.IX Subsection "analyze"
Analyzes possible file and directory problems( permissions and non-existing directories etc ). Returns 1 if 
all it's ok! Otherwise returns 0. Receives the files list( arrayref ) as parameter.
.SS "exec_unzip"
.IX Subsection "exec_unzip"
This is a internal method. You should exec unzip method. Never exec this method directly.
.SS "show_errors"
.IX Subsection "show_errors"
Makes the obvious. Show errors. Don't receives anything. Returns the error messages( arrayref ).
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "filename"
.IX Subsection "filename"
Name/Path of file that will be 'unziped'
.SS "passwd"
.IX Subsection "passwd"
string with the password
.SS "destiny"
.IX Subsection "destiny"
filepath to extract file
.SS "errors"
.IX Subsection "errors"
stack(array) of errors
.SH "DEPENDECIES"
.IX Header "DEPENDECIES"
unzip program \s-1MUST\s0 be installed!
.SH "AUTHOR"
.IX Header "AUTHOR"
Andre Carneiro, \f(CW\*(C`<andregarciacarneiro at gmail.com>\*(C'\fR
.SH "NOTES FOR THIS VERSION"
.IX Header "NOTES FOR THIS VERSION"
More tests implement.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-unzip\-passwd at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Unzip\-Passwd>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
This module was tested \s-1JUST\s0 \s-1ON\s0 \s-1LINUX\s0. \s-1DON\s0'T \s-1HAVE\s0 \s-1SUPPORT\s0 \s-1IN\s0 \s-1WINDOWS\s0 \s-1YET\s0. \s-1MAYBE\s0 \s-1LATER\s0...
.PP
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&   perldoc Unzip::Passwd
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Unzip\-Passwd>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Unzip\-Passwd>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Unzip\-Passwd>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Unzip\-Passwd/>
.SH "TODO"
.IX Header "TODO"
All other features from unzip ( Linux version ). :D
.PP
Aggregates some log module.
.PP
Finish the tests... :(
.PP
Create a better way to treat exceptions...
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Luis Campos de Carvalho(Champs) \- for inspiration.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010 Andre Carneiro.
.PP
This program is released under the following license: Artistic2
